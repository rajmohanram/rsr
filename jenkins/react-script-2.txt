pipeline {
    agent any
   parameters {
       gitParameter branchFilter: 'origin/(.*)', defaultValue: 'release/razorpayStage', name: 'BUILD_BRANCH', type: 'PT_BRANCH'
         }	
        environment{
        scannerHome = tool 'SonarQubeScanner'		
		imageName = "harbor-registry-mndc.uidai.gov.in/unifiedapp/uid-my-aadhar-ui"		
		MANDATORY_FILE="README.md"	
        FPR_FILE="uid-my-aadhar.fpr"
        APPLICATION_NAME="UID-My-Aadhar-UI"
        RELEASE_TYPE="New-Release"
		JOB_TYPE="CI"
        STAGE_FLAG="Y"
        PROD_FLAG="N"
        no_proxy = '10.66.100.40' 
        PROD_MNDC_NAMESPACE="my-aadhaar"
        PROD_MNDC_DEPLOYMENT="uid-my-aadhaar-ui"
        PROD_HBDC_NAMESPACE="${PROD_MNDC_NAMESPACE}"
        PROD_HBDC_DEPLOYMENT="${PROD_MNDC_DEPLOYMENT}"		
    }
	
    stages {
	   stage ('1-Repository-Clone') {
            steps {
                script {
            
                    git branch: "${params.BUILD_BRANCH}", url:'http://10.66.200.23:7990/scm/ux/myaadhaar.git', credentialsId:'BitbucketID'	
                }
            }
        }
		stage ('2-Environment-Prepration') {
            steps {
                script {
				      sh '''
                         cp -r ${RESOURCE_DIR}/uid-my-aadhar/* .
                         rm -rf image_version
					     cat package.json | grep -o -P '(?<="version": ").*(?=",)' >> image_version
					  '''
				    env.imageTag = sh(script: 'cat image_version', returnStdout: true).trim()
				    
                }
            }
        }	
		stage ('3-Version validation'){
	   steps {
	   script {
	           
	           env.VERSION_VALIDATION_FLAG = sh(script: 'sh ${autopath}/version-validator/version-validator-1.0.sh VAL ${imageTag} ${PROD_MNDC_NAMESPACE} ${PROD_MNDC_DEPLOYMENT} ${PROD_HBDC_NAMESPACE} ${PROD_HBDC_DEPLOYMENT} ', returnStdout: true).trim()                 
		             if ( env.VERSION_VALIDATION_FLAG == 'Y'){
					    currentBuild.result = 'FAILURE'
					    sh 'echo "[ERROR]: Current Build version is incompliant as it is same as that of the Production deployed one, This will Overwrite the Image with recent changes . Aborting Build"' 	
                        sh 'sh ${autopath}/version-validator/version-validator-1.0.sh QRY ${imageTag} ${PROD_MNDC_NAMESPACE} ${PROD_MNDC_DEPLOYMENT} ${PROD_HBDC_NAMESPACE} ${PROD_HBDC_DEPLOYMENT}'
					   }else{
					    sh 'echo "[INFO]: Current Build version is compliant, Continuing Build"' 						
						} 
					}
			}
	}

		stage ('4-Verification') {
		    when {
		      expression {env.VERSION_VALIDATION_FLAG == 'N'}
		     }
            steps {
                script {
				      env.BUILD_FLAG = sh(script: 'sh ${autopath}/filecheck/filecheck.sh ${JOB_NAME}/${MANDATORY_FILE}', returnStdout: true).trim()
					  if ( env.BUILD_FLAG == 'N'){
					    currentBuild.result = 'FAILURE'
					    sh 'echo "[FAILURE]: Mandatory File ${MANDATORY_FILE} is not Present , Aborting Build"'  
					   }else{
					    sh 'echo "[SUCESS]: Mandatory File ${MANDATORY_FILE} is Present , Continuing Build"' 						
						} 					  
                                        
                }
            }
        } 
      stage ('5-Download-Fortify-Filters') {
	   when {
		      expression {env.BUILD_FLAG == 'Y'}
		     }
      steps {
	     sh 'rm -rf FORTIFY;mkdir FORTIFY '
		 dir ("FORTIFY"){
         git (url:'http://10.66.200.23:7990/scm/udf/my-aadhar-ui.git', branch: 'master', credentialsId: 'BitbucketID')
		   }
		 }
    }
        	
	 	stage ('6-SonarQube-Scan') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'SonarQube', installationName: 'SonarQube'){
					sh '${scannerHome}/bin/sonar-scanner -Dproject.settings=sonar-scanner.properties'
					}
                }
            }
        }
		stage ('7-FortifyClean') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    fortifyClean addJVMOptions: '', buildID: '1', logFile: '', maxHeap: ''
                }
            }
        }
		stage ('8-FortifyTranslate') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script { 
                     fortifyTranslate addJVMOptions: '', buildID: '1', excludeList: '', logFile: '', maxHeap: '', projectScanType: fortifyJava(javaAddOptions: '', javaClasspath: '', javaSrcFiles: '**/*.js', javaVersion: '8')
                }
            }
        }
		stage ('9-FortifyScan') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    sh 'sourceanalyzer -Dcom.fortify.sca.ProjectRoot=.fortify -b 1 -scan -f ${FPR_FILE} -filter FORTIFY/${FORTIFY_SCA_INSTANCE_FILTER}'
                }
            }
        }
		stage ('10-Uploadssc') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    fortifyUpload appName: 'UID-My-Aadhar', appVersion: '0.0.2', failureCriteria: '', filterSet: '', pollingInterval: '', resultsFile: 'uid-my-aadhar.fpr'
                }
            }
        }
		stage ('11- Fortify Report Generation'){
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
			steps {
				script {
					sh 'sudo /opt/FortifySCA/bin/BIRTReportGenerator -template "Developer Workbook" -source uid-my-aadhar.fpr -format PDF -output uid-my-aadhar-fortify-report.pdf -showSuppressed -UseFortifyPriorityOrder'
				}
			}
		} 
      stage ('12- Fortify Validation'){
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
			steps {
				script {
				env.FORTIFY_VALIDATION_FLAG = sh(script: 'sh ${autopath}/fortify/fortify-validator.sh ${JOB_NAME} ${FPR_FILE}', returnStdout: true).trim()
					  if ( env.FORTIFY_VALIDATION_FLAG == 'F'){
					    currentBuild.result = 'FAILURE'
					    sh '${autopath}/error-handler/error-handler.sh fortify'  
					   }else{
					    sh 'echo "[INFO] : FORTIFY VALIDATION IS PASSED, CONTINUING BUILD"' 						
					}
				}
			}
		}
		       
		stage ('13-Building-Docker-Image') {
		when {
		      expression {env.FORTIFY_VALIDATION_FLAG == 'P'}
		   }
            steps {
                script {
                   
                    dockerImage=docker.build imageName + ":" + imageTag
                }
            }
        }
		stage ('14-Push-Image-To-Harbor') {
		when {
		      expression {env.FORTIFY_VALIDATION_FLAG == 'P'}
		   }
            steps {
                script {
                    docker.withRegistry(harborURL,'HarborID'){
					dockerImage.push()
					}
					env.imageDigest = sh(script: "docker inspect $imageName:$imageTag | jq -r '.[0].RepoDigests[0]' | cut -d'@' -f2", returnStdout: true).trim()
                }
            }
        }
	    stage ('15-Remove-Local-Image') {
		when {
		      expression {env.FORTIFY_VALIDATION_FLAG == 'P'}
		   }
            steps {
                script {
				 
                     sh' docker rmi $imageName:$imageTag'
                     
                }
            }
        }  
       stage ('16-Devops-Tracker-update') {
		 when {
		      expression {env.FORTIFY_VALIDATION_FLAG == 'P'}
		   }
            steps {
                script {
                   env.IMAGE="${imageName + ':' + imageTag}"
				    sh 'sh ${DEVOPS_TRACKER_UPDATE} ${APPLICATION_NAME} ${imageTag} ${RELEASE_TYPE} ${JOB_TYPE} ${IMAGE} ${STAGE_FLAG} ${PROD_FLAG}'
                    
                }
            }		
      }
	}
post {  
          
         success {  
				emailext (
					subject: "Notification from Jenkins Job - '${env.JOB_NAME} | Build Success",
					mimeType: 'text/html',
					attachmentsPattern: '*.pdf, README*',
					from: 'noreply@uidai.net.in',
					to: 'devopsteam@uidai.net.in, msap.reteam@uidai.net.in,aditya.poddar@uidai.net.in',
					body: """<p>Hi All,</p>
							 <p>This is an auto generated notification mail from Jenkins server.Please don't reply all</p>
							 <p>Docker Image ${env.IMAGE_TAG}:${env.VERSION} has been successfully built by Jenkins Job - ${env.JOB_NAME} and pushed to Harbor Registry - ${env.harborURL}, It is now readily available for deployment.</p>
							 <p>Below source code scans were performed and the results were uploaded into their respective portals</p>
							 <br><br>
							 
							 1. SonarQube Code Quality Analyser (URL: http://10.66.100.31:9000/dashboard?id=${JOB_BASE_NAME})<br>
							 2. Fortify Static Code Analyser (URL: http://10.66.100.23:8080/ssc)
							 							 
							 <br><br>
							 With Regards,<br>
							 CIDR DevOps Team<br>
							 UIDAI Technology Center"""
				)			
			}
		 
         failure {  
                sh 'rm -rf buildlogs.txt'
                sh 'curl -u cicdviewer:cicdviewer@123  ${BUILD_URL}/consoleText -o ./buildlogs.txt' 
				emailext (
					subject: "Notification from Jenkins Job - '${env.JOB_NAME} | Build Failure",
					mimeType: 'text/html',
					attachmentsPattern: '*.txt',
					from: 'noreply@uidai.net.in',
					to: 'devopsteam@uidai.net.in, msap.reteam@uidai.net.in,aditya.poddar@uidai.net.in',
					body: """<p>Hi All,</p>
							 <p>This is an auto generated notification mail from Jenkins server.Please don't reply all</p>
							 <p>Jenkins job : ${env.JOB_NAME} is failed. Please check the attached error logs</p>
							
							 <br><br>
							 
							
							 							 
							 <br><br>
							 With Regards,<br>
							 CIDR DevOps Team<br>
							 UIDAI Technology Center"""
				)			
			}
		  
         unstable {
            sh 'rm -rf buildlogs.txt'
            sh 'curl -u cicdviewer:cicdviewer@123  ${BUILD_URL}/consoleText -o ./buildlogs.txt' 		 
            emailext (
					subject: "Notification from Jenkins Job - '${env.JOB_NAME} | Build Unstable",
					mimeType: 'text/html',
					attachmentsPattern: '*.txt',
					from: 'noreply@uidai.net.in',
					to: 'devopsteam@uidai.net.in, msap.reteam@uidai.net.in,aditya.poddar@uidai.net.in',
					body: """<p>Hi All,</p>
							 <p>This is an auto generated notification mail from Jenkins server.Please don't reply all</p>
							 <p>Jenkins job : ${env.JOB_NAME} is failed. Please check the attached error logs</p>
							 
							 <br><br>
							 
							
							 							 
							 <br><br>
							 With Regards,<br>
							 CIDR DevOps Team<br>
							 UIDAI Technology Center"""
				)			
			}
		} 
	}