 pipeline {
    agent any
	
    environment{
        scannerHome = tool 'SonarQubeScanner'
		imageTag = "harbor-registry-mndc.uidai.gov.in/unifiedapp/uid-abis-middleware-sb"
		work="Core-Engineering-Track/build-uid-abis-middleware-sb"		
		APPLICATION_NAME="uid-abis-middleware-sb"
        RELEASE_TYPE="New-Release"
		JOB_TYPE="CI"
        STAGE_FLAG="Y"
        PROD_FLAG="N"
		MANDATORY_FILE="README.md"
		
		
    }
	
    stages {
       stage ('1-Repository-Clone') { 
            steps {           
                script {
                    git (url:'http://10.66.200.23:7990/scm/ce/uid-abis-middleware-sb.git', branch: 'release', credentialsId: 'BitbucketID')	
                }
            }
        }
		stage ('2-Verification') {
            steps {
                script {
				      env.BUILD_FLAG = sh(script: 'sh ${autopath}/filecheck/filecheck.sh ${JOB_NAME}/${MANDATORY_FILE}', returnStdout: true).trim()
					  if ( env.BUILD_FLAG == 'N'){
					    currentBuild.result = 'FAILURE'
					    sh 'echo "[FAILURE]: Mandatory File ${MANDATORY_FILE} is not Present , Aborting Build"'  
					   }else{
					    sh 'echo "[SUCESS]: Mandatory File ${MANDATORY_FILE} is Present , Continuing Build"' 						
						} 
					  
                                        
                }
            }
        } 
		stage ('3-Pre-build') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    sh 'cd ${autopath}/sonarqube;sh sonar-scanner-generator.sh ${JOB_NAME}'
                }
            }
        }
		stage ('4-Maven-Compile') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    sh 'mvn clean compile'
                }
            }
        }
		stage ('5-SonarQube-Scan') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
    //                 withSonarQubeEnv(credentialsId: 'SonarQube', installationName: 'SonarQube'){
				// 	sh '${scannerHome}/bin/sonar-scanner -Dproject.settings=sonar-scanner.properties'
				// 	}
				sh 'echo running'
				}
            }
		}
      	stage ('6-FortifyClean') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    fortifyClean addJVMOptions: '', buildID: '1', logFile: '', maxHeap: ''
                }
            }
        }
		stage ('7-FortifyTranslate') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                 script {
                    fortifyTranslate addJVMOptions: '', buildID: '1', excludeList: '', logFile: '', maxHeap: '', projectScanType: fortifyJava(javaAddOptions: '', javaClasspath: '', javaSrcFiles: '**/*.java', javaVersion: '8')
               }
            }
        }
		stage ('8-FortifyScan') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    fortifyScan addJVMOptions: '', addOptions: '', buildID: '1', customRulepacks: '', logFile: '', maxHeap: '', resultsFile: 'uid-abis-middleware-sb.fpr'
                }
            }
        }
		stage ('9-Uploadssc') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    fortifyUpload appName: 'uid-abis-middleware-sb', appVersion: '1.0.0-RELEASE', failureCriteria: '', filterSet: '', pollingInterval: '', resultsFile: 'uid-abis-middleware-sb.fpr'
                }
            }
        }
		stage ('10- Fortify Report Generation'){
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
			steps {
				script {
					sh 'sudo /opt/FortifySCA/bin/BIRTReportGenerator -template "Developer Workbook" -source uid-abis-middleware-sb.fpr -format PDF -output Fortifyscan_report.pdf -showSuppressed -UseFortifyPriorityOrder'
				}
			}
		}
		stage ('11-Maven-Package') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    sh 'mvn clean install'
                    sh "mvn sonar:sonar"
                }
            }
        } 
		
		stage ('12-Build-Docker-Image') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
				    env.vers = sh(script: 'cd ${autopath};./autoversion.sh ${JOB_NAME}', returnStdout: true).trim()
					sh 'cd ${autopath}/docker/dockerfilegeerator;./dockerfilegenerator.sh uid-abis-middleware-sb.jar 8080 ${work}'
                    dockerImage=docker.build imageTag + ":" + vers
                }
            }
        }
		stage ('13-Push-Image-To-Harbor') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    docker.withRegistry(harborURL,'HarborID'){
					dockerImage.push()
					}
                }
            }
        }
	    stage ('14-Remove-Local-Image') {
		when {
		      expression {env.BUILD_FLAG == 'Y'}
		   }
            steps {
                script {
                    
                     sh' docker rmi $imageTag:$vers'

                       
                }
            }
        }
    }  
   post {  
          
         success {  
            
				emailext (
					subject: "Notification from Jenkins Job - ${env.JOB_NAME} | Build Success",
					mimeType: 'text/html',
					from: 'noreply@uidai.net.in',
					to: ' devopsteam@uidai.net.in, msap.cegteam@uidai.net.in',
					attachmentsPattern: '*.pdf',
					body: """<p>Hi All,</p>
							 <p>This is an auto generated notification mail from Jenkins server. A Docker Image ${env.imageTag}:${env.ver} has been successfully built by a Jenkins Job - '${env.JOB_NAME}' : '#${env.BUILD_NUMBER}' and pushed to Harbor Registry - '${env.harborURL}'. It is now readily available for deployment.</p>
							 <p>The below mentioned source code scans are performed and results/artifacts are also uploaded in their respective portals:</p>
							 <br>							 
							 1. SonarQube Code Quality Analyser (URL: http://10.66.100.31:9000/dashboard?id=in.gov.uidai%3Auid-abis-middleware-sb)<br>
							 2. Fortify Static Code Analyser (URL: http://10.66.100.23:8080/ssc) and report attached.
							 							 
							 <br>
							 With Regards,<br>
							 CIDR DevOps Team<br>
							 UIDAI Technology Center"""
				)		
			}
		 
         failure {  
                sh 'rm -rf buildlogs.txt'
                sh 'curl -u cicdviewer:cicdviewer@123  ${BUILD_URL}/consoleText -o ./buildlogs.txt' 
				emailext (
					subject: "Notification from Jenkins Job - ${env.JOB_NAME} | Build Failure",
					mimeType: 'text/html',
					attachmentsPattern: 'buildlogs.*',
					from: 'noreply@uidai.net.in',
					to: 'devopsteam@uidai.net.in, msap.cegteam@uidai.net.in',
					body: """<p>Hi All,</p>
							 <p>This is an auto generated notification mail from Jenkins server.Please don't reply all</p>
							 <p>Jenkins job : ${env.JOB_NAME} : ${env.BUILD_ID}  is failed. Please check the attached error logs</p>
							 <br><br>
							 
							
							 							 
							 <br><br>
							 With Regards,<br>
							 CIDR DevOps Team<br>
							 UIDAI Technology Center"""
				)			
			}
		  
         unstable {
            sh 'rm -rf buildlogs.txt'
            sh 'curl -u cicdviewer:cicdviewer@123  ${BUILD_URL}/consoleText -o ./buildlogs.txt' 
            emailext (
					subject: "Notification from Jenkins Job - ${env.JOB_NAME} | Build Unstable",
					mimeType: 'text/html',
					attachmentsPattern: 'buildlogs.*',
					from: 'noreply@uidai.net.in',
					to: 'devopsteam@uidai.net.in, msap.cegteam@uidai.net.in',
					body: """<p>Hi All,</p>
							 <p>This is an auto generated notification mail from Jenkins server.Please don't reply all</p>
							 <p>Jenkins job : ${env.JOB_NAME} : ${env.BUILD_ID}  is failed. Please check the attached error logs</p>
							 <br><br>
							 
							
							 							 
							 <br><br>
							 With Regards,<br>
							 CIDR DevOps Team<br>
							 UIDAI Technology Center"""
				)			
			}
		} 	
}